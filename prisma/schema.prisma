// prisma/schema.prisma
// Hypenest Media â€“ Creator Marketplace (MySQL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//////////////////////////////////////////////////////
// Enums
//////////////////////////////////////////////////////

enum Role {
  BRAND
  CREATOR
  ADMIN
}

enum CampaignStatus {
  DRAFT
  INVITING
  IN_PROGRESS
  REVIEW
  COMPLETED
}

enum ProposalStatus {
  PENDING
  COUNTERED
  ACCEPTED
  REJECTED
}

//////////////////////////////////////////////////////
// Core Models
//////////////////////////////////////////////////////

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  role       Role
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Optional associations (one user belongs to either a Brand or a Creator account)
  brandId    String?
  creatorId  String?

  brand      Brand?   @relation(fields: [brandId], references: [id], onDelete: SetNull, map: "fk_user_brand")
  creator    Creator? @relation(fields: [creatorId], references: [id], onDelete: SetNull, map: "fk_user_creator")

  @@index([brandId])
  @@index([creatorId])
}

model Brand {
  id         String     @id @default(cuid())
  name       String
  website    String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  users      User[]
  campaigns  Campaign[]
  reviews    Review[]   @relation("BrandReviews")

  @@index([name])
}

model Creator {
  id           String     @id @default(cuid())
  displayName  String
  bio          String?
  niches       String?     // CSV for MVP; normalize later
  location     String?
  languages    String?
  platforms    String?     // CSV of social platforms
  packagesJson Json?       // MVP: store packages/prices as JSON
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  users        User[]
  proposals    Proposal[]
  reviews      Review[]    @relation("CreatorReviews")

  @@index([displayName])
  @@index([location])
}

model Campaign {
  id           String         @id @default(cuid())
  brandId      String
  title        String
  objective    String?
  platforms    String?        // CSV: IG,TikTok,YT,UGC
  budgetCents  Int?           // store currency as integer cents
  brief        String?
  status       CampaignStatus @default(DRAFT)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  brand        Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade, map: "fk_campaign_brand")
  proposals    Proposal[]
  messages     Message[]

  @@index([brandId])
  @@index([status, updatedAt])
}

model Proposal {
  id            String         @id @default(cuid())
  campaignId    String
  creatorId     String
  priceCents    Int?
  timelineDays  Int?
  notes         String?
  status        ProposalStatus @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  campaign      Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade, map: "fk_proposal_campaign")
  creator       Creator        @relation(fields: [creatorId], references: [id], onDelete: Cascade, map: "fk_proposal_creator")

  @@index([campaignId])
  @@index([creatorId])
  @@index([status, updatedAt])
}

model Message {
  id          String   @id @default(cuid())
  campaignId  String
  fromUserId  String?          // <-- nullable to support onDelete: SetNull
  content     String
  createdAt   DateTime @default(now())

  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade, map: "fk_message_campaign")
  fromUser    User?    @relation(fields: [fromUserId], references: [id], onDelete: SetNull, map: "fk_message_user")

  @@index([campaignId])
  @@index([fromUserId])
}

model Review {
  id         String   @id @default(cuid())
  creatorId  String
  brandId    String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  creator    Creator  @relation("CreatorReviews", fields: [creatorId], references: [id], onDelete: Cascade, map: "fk_review_creator")
  brand      Brand    @relation("BrandReviews",   fields: [brandId],   references: [id], onDelete: Cascade, map: "fk_review_brand")

  @@index([creatorId])
  @@index([brandId])
  @@index([rating, createdAt])
}
